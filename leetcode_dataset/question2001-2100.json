{"features":[{"feature_idx":0,"name":"number","type":{"dtype":"int64","_type":"Value"}},{"feature_idx":1,"name":"difficulty","type":{"dtype":"int64","_type":"Value"}},{"feature_idx":2,"name":"question","type":{"dtype":"string","_type":"Value"}}],"rows":[{"row_idx":2000,"row":{"number":2597,"difficulty":1,"question":"class Solution:\n    def beautifulSubsets(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        You are given an array nums of positive integers and a positive integer k.\n        A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.\n        Return the number of non-empty beautiful subsets of the array nums.\n        A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\n        Example 1:\n        Input: nums = [2,4,6], k = 2\n        Output: 4\n        Explanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\n        It can be proved that there are only 4 beautiful subsets in the array [2,4,6].\n        Example 2:\n        Input: nums = [1], k = 1\n        Output: 1\n        Explanation: The beautiful subset of the array nums is [1].\n        It can be proved that there is only 1 beautiful subset in the array [1].\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2001,"row":{"number":2562,"difficulty":0,"question":"class Solution:\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed integer array nums.\n        The concatenation of two numbers is the number formed by concatenating their numerals.\n            For example, the concatenation of 15, 49 is 1549.\n        The concatenation value of nums is initially equal to 0. Perform this operation until nums becomes empty:\n            If there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums.\n            If one element exists, add its value to the concatenation value of nums, then delete it.\n        Return the concatenation value of the nums.\n        Example 1:\n        Input: nums = [7,52,2,4]\n        Output: 596\n        Explanation: Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n         - In the first operation:\n        We pick the first element, 7, and the last element, 4.\n        Their concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\n        Then we delete them from nums, so nums becomes equal to [52,2].\n         - In the second operation:\n        We pick the first element, 52, and the last element, 2.\n        Their concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\n        Then we delete them from the nums, so nums becomes empty.\n        Since the concatenation value is 596 so the answer is 596.\n        Example 2:\n        Input: nums = [5,14,13,8,12]\n        Output: 673\n        Explanation: Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n         - In the first operation:\n        We pick the first element, 5, and the last element, 12.\n        Their concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\n        Then we delete them from the nums, so nums becomes equal to [14,13,8].\n         - In the second operation:\n        We pick the first element, 14, and the last element, 8.\n        Their concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\n        Then we delete them from the nums, so nums becomes equal to [13].\n         - In the third operation:\n        nums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\n        Then we delete it from nums, so nums become empty.\n        Since the concatenation value is 673 so the answer is 673.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2002,"row":{"number":2563,"difficulty":1,"question":"class Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n        \"\"\"\n        Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.\n        A pair (i, j) is fair if:\n            0 <= i < j < n, and\n            lower <= nums[i] + nums[j] <= upper\n        Example 1:\n        Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6\n        Output: 6\n        Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n        Example 2:\n        Input: nums = [1,7,9,2,5], lower = 11, upper = 11\n        Output: 1\n        Explanation: There is a single fair pair: (2,3).\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2003,"row":{"number":2564,"difficulty":1,"question":"class Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        You are given a binary string s, and a 2D integer array queries where queries[i] = [firsti, secondi].\n        For the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise XORed with firsti. In other words, val ^ firsti == secondi.\n        The answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. If there are multiple answers, choose the one with the minimum lefti.\n        Return an array ans where ans[i] = [lefti, righti] is the answer to the ith query.\n        A substring is a contiguous non-empty sequence of characters within a string.\n        Example 1:\n        Input: s = \"101101\", queries = [[0,5],[1,2]]\n        Output: [[0,2],[2,3]]\n        Explanation: For the first query the substring in range [0,2] is \"101\" which has a decimal value of 5, and 5 ^ 0 = 5, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is \"11\", and has a decimal value of 3, and 3 ^ 1 = 2. So, [2,3] is returned for the second query. \n        Example 2:\n        Input: s = \"0101\", queries = [[12,8]]\n        Output: [[-1,-1]]\n        Explanation: In this example there is no substring that answers the query, hence [-1,-1] is returned.\n        Example 3:\n        Input: s = \"1\", queries = [[4,5]]\n        Output: [[0,0]]\n        Explanation: For this example, the substring in range [0,0] has a decimal value of 1, and 1 ^ 4 = 5. So, the answer is [0,0].\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2004,"row":{"number":2565,"difficulty":2,"question":"class Solution:\n    def minimumScore(self, s: str, t: str) -> int:\n        \"\"\"\n        You are given two strings s and t.\n        You are allowed to remove any number of characters from the string t.\n        The score of the string is 0 if no characters are removed from the string t, otherwise:\n            Let left be the minimum index among all removed characters.\n            Let right be the maximum index among all removed characters.\n        Then the score of the string is right - left + 1.\n        Return the minimum possible score to make t a subsequence of s.\n        A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n        Example 1:\n        Input: s = \"abacaba\", t = \"bzaa\"\n        Output: 1\n        Explanation: In this example, we remove the character \"z\" at index 1 (0-indexed).\n        The string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1.\n        It can be proven that 1 is the minimum score that we can achieve.\n        Example 2:\n        Input: s = \"cde\", t = \"xyz\"\n        Output: 3\n        Explanation: In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed).\n        The string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3.\n        It can be proven that 3 is the minimum score that we can achieve.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2005,"row":{"number":2569,"difficulty":2,"question":"class Solution:\n    def handleQuery(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n        \"\"\"\n        You are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries:\n            For a query of type 1, queries[i] = [1, l, r]. Flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. Both l and r are 0-indexed.\n            For a query of type 2, queries[i] = [2, p, 0]. For every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p.\n            For a query of type 3, queries[i] = [3, 0, 0]. Find the sum of the elements in nums2.\n        Return an array containing all the answers to the third type queries.\n        Example 1:\n        Input: nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]\n        Output: [3]\n        Explanation: After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned.\n        Example 2:\n        Input: nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]\n        Output: [5]\n        Explanation: After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2006,"row":{"number":2566,"difficulty":0,"question":"class Solution:\n    def minMaxDifference(self, num: int) -> int:\n        \"\"\"\n        You are given an integer num. You know that Danny Mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit.\n        Return the difference between the maximum and minimum values Danny can make by remapping exactly one digit in num.\n        Notes:\n            When Danny remaps a digit d1 to another digit d2, Danny replaces all occurrences of d1 in num with d2.\n            Danny can remap a digit to itself, in which case num does not change.\n            Danny can remap different digits for obtaining minimum and maximum values respectively.\n            The resulting number after remapping can contain leading zeroes.\n            We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\n        Example 1:\n        Input: num = 11891\n        Output: 99009\n        Explanation: \n        To achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.\n        To achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.\n        The difference between these two numbers is 99009.\n        Example 2:\n        Input: num = 90\n        Output: 99\n        Explanation:\n        The maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\n        Thus, we return 99.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2007,"row":{"number":2568,"difficulty":1,"question":"class Solution:\n    def minImpossibleOR(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed integer array nums.\n        We say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of nums.\n        Return the minimum positive non-zero integer that is not expressible from nums.\n        Example 1:\n        Input: nums = [2,1]\n        Output: 4\n        Explanation: 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4.\n        Example 2:\n        Input: nums = [5,3,2]\n        Output: 1\n        Explanation: We can show that 1 is the smallest number that is not expressible.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2008,"row":{"number":2567,"difficulty":1,"question":"class Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed integer array nums.\n            The low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.\n            The high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.\n            The score of nums is the sum of the high and low scores of nums.\n        To minimize the score of nums, we can change the value of at most two elements of nums.\n        Return the minimum possible score after changing the value of at most two elements of nums.\n        Note that |x| denotes the absolute value of x.\n        Example 1:\n        Input: nums = [1,4,3]\n        Output: 0\n        Explanation: Change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. Now, the value of |nums[i] - nums[j]| is always equal to 0, so we return 0 + 0 = 0.\n        Example 2:\n        Input: nums = [1,4,7,8,5]\n        Output: 3\n        Explanation: Change nums[0] and nums[1] to be 6. Now nums becomes [6,6,7,8,5].\n        Our low score is achieved when i = 0 and j = 1, in which case |nums[i] - nums[j]| = |6 - 6| = 0.\n        Our high score is achieved when i = 3 and j = 4, in which case |nums[i] - nums[j]| = |8 - 5| = 3.\n        The sum of our high and low score is 3, which we can prove to be minimal.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2009,"row":{"number":2570,"difficulty":0,"question":"class Solution:\n    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        You are given two 2D integer arrays nums1 and nums2.\n            nums1[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali.\n            nums2[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali.\n        Each array contains unique ids and is sorted in ascending order by id.\n        Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\n            Only ids that appear in at least one of the two arrays should be included in the resulting array.\n            Each id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be 0.\n        Return the resulting array. The returned array must be sorted in ascending order by id.\n        Example 1:\n        Input: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]\n        Output: [[1,6],[2,3],[3,2],[4,6]]\n        Explanation: The resulting array contains the following:\n        - id = 1, the value of this id is 2 + 4 = 6.\n        - id = 2, the value of this id is 3.\n        - id = 3, the value of this id is 2.\n        - id = 4, the value of this id is 5 + 1 = 6.\n        Example 2:\n        Input: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]\n        Output: [[1,3],[2,4],[3,6],[4,3],[5,5]]\n        Explanation: There are no common ids, so we just include each id with its value in the resulting list.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2010,"row":{"number":2573,"difficulty":2,"question":"class Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n        \"\"\"\n        We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:\n            lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].\n        Given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.\n        A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.\n        Example 1:\n        Input: lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n        Output: \"abab\"\n        Explanation: lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\".\n        Example 2:\n        Input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n        Output: \"aaaa\"\n        Explanation: lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\". \n        Example 3:\n        Input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\n        Output: \"\"\n        Explanation: lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2011,"row":{"number":2572,"difficulty":1,"question":"class Solution:\n    def squareFreeSubsets(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a positive integer 0-indexed array nums.\n        A subset of the array nums is square-free if the product of its elements is a square-free integer.\n        A square-free integer is an integer that is divisible by no square number other than 1.\n        Return the number of square-free non-empty subsets of the array nums. Since the answer may be too large, return it modulo 109 + 7.\n        A non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\n        Example 1:\n        Input: nums = [3,4,4,5]\n        Output: 3\n        Explanation: There are 3 square-free subsets in this example:\n        - The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.\n        - The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.\n        - The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.\n        It can be proven that there are no more than 3 square-free subsets in the given array.\n        Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: There is 1 square-free subset in this example:\n        - The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer.\n        It can be proven that there is no more than 1 square-free subset in the given array.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2012,"row":{"number":2571,"difficulty":1,"question":"class Solution:\n    def minOperations(self, n: int) -> int:\n        \"\"\"\n        You are given a positive integer n, you can do the following operation any number of times:\n            Add or subtract a power of 2 from n.\n        Return the minimum number of operations to make n equal to 0.\n        A number x is power of 2 if x == 2i where i >= 0.\n        Example 1:\n        Input: n = 39\n        Output: 3\n        Explanation: We can do the following operations:\n        - Add 20 = 1 to n, so now n = 40.\n        - Subtract 23 = 8 from n, so now n = 32.\n        - Subtract 25 = 32 from n, so now n = 0.\n        It can be shown that 3 is the minimum number of operations we need to make n equal to 0.\n        Example 2:\n        Input: n = 54\n        Output: 3\n        Explanation: We can do the following operations:\n        - Add 21 = 2 to n, so now n = 56.\n        - Add 23 = 8 to n, so now n = 64.\n        - Subtract 26 = 64 from n, so now n = 0.\n        So the minimum number of operations is 3.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2013,"row":{"number":2577,"difficulty":2,"question":"class Solution:\n    def minimumTime(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\n        You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\n        Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\n        Example 1:\n        Input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]\n        Output: 7\n        Explanation: One of the paths that we can take is the following:\n        - at t = 0, we are on the cell (0,0).\n        - at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.\n        - at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.\n        - at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.\n        - at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.\n        - at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.\n        - at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.\n        - at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.\n        The final time is 7. It can be shown that it is the minimum time possible.\n        Example 2:\n        Input: grid = [[0,2,4],[3,2,1],[1,0,4]]\n        Output: -1\n        Explanation: There is no path from the top left to the bottom-right cell.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2014,"row":{"number":2576,"difficulty":1,"question":"class Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n        \"\"\"\n        You are given a 0-indexed integer array nums.\n        Initially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n            Pick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j.\n        Return the maximum possible number of marked indices in nums using the above operation any number of times.\n        Example 1:\n        Input: nums = [3,5,2,4]\n        Output: 2\n        Explanation: In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\n        It can be shown that there's no other valid operation so the answer is 2.\n        Example 2:\n        Input: nums = [9,2,5,4]\n        Output: 4\n        Explanation: In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\n        In the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\n        Since there is no other operation, the answer is 4.\n        Example 3:\n        Input: nums = [7,6,8]\n        Output: 0\n        Explanation: There is no valid operation to do, so the answer is 0.\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2015,"row":{"number":2575,"difficulty":1,"question":"class Solution:\n    def divisibilityArray(self, word: str, m: int) -> List[int]:\n        \"\"\"\n        You are given a 0-indexed string word of length n consisting of digits, and a positive integer m.\n        The divisibility array div of word is an integer array of length n such that:\n            div[i] = 1 if the numeric value of word[0,...,i] is divisible by m, or\n            div[i] = 0 otherwise.\n        Return the divisibility array of word.\n        Example 1:\n        Input: word = \"998244353\", m = 3\n        Output: [1,1,0,0,0,1,1,0,0]\n        Explanation: There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\".\n        Example 2:\n        Input: word = \"1010\", m = 10\n        Output: [0,1,0,1]\n        Explanation: There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\".\n        \"\"\"\n"},"truncated_cells":[]},{"row_idx":2016,"row":{"number":2574,"difficulty":0,"question":"class Solution:\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:\n            answer.length == nums.length.\n            answer[i] = |leftSum[i] - rightSum[i]|.\n        Where:\n            leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.\n            rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.\n        Return the array answer.\n        Example 1:\n        Input: nums = [10,4,8,3]\n        Output: [15,1,11,22]\n        Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\n        The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].\n        Example 2:\n        Input: nums = [1]\n        Output: [0]\n        Explanation: The array leftSum is [0] and the array rightSum is [0].\n        The array answer is [|0 - 0|] = [0].\n        \"\"\"\n"},"truncated_cells":[]}],"num_rows_total":2017,"num_rows_per_page":100}